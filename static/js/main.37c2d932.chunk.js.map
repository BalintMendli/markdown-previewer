{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["placeholder","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","editorMaximized","previewerMaximized","handleChange","bind","assertThisInitialized","maximizeEditor","maximizePreviewer","event","setState","target","react_default","a","createElement","className","id","onClick","onChange","dist_default","markdown","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.37c2d932.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport MarkdownRenderer from 'react-markdown-renderer';\r\n\r\nconst placeholder='# Welcome to my React Markdown Previewer!\\n\\n## This is a sub-heading...\\n### And here\\'s some other cool stuff:\\n  \\nHeres some code, `<div></div>`, between 2 backticks.\\n\\n```\\n// this is multi-line code:\\n\\nfunction anotherExample(firstLine, lastLine) {\\n  if (firstLine == \\'```\\' && lastLine == \\'```\\') {\\n    return multiLineCode;\\n  }\\n}\\n```\\n  \\nYou can also make text **bold**... whoa!\\nOr _italic_.\\nOr... wait for it... **_both!_**\\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\\nThere\\'s also [links](https://www.freecodecamp.com), and\\n> Block Quotes!\\n\\nAnd if you want to get really crazy, even tables:\\n\\nWild Header | Crazy Header | Another Header?\\n------------ | ------------- | ------------- \\nYour content can | be here, and it | can be here....\\nAnd here. | Okay. | I think we get it.\\n\\n- And of course there are lists.\\n  - Some are bulleted.\\n     - With different indentation levels.\\n        - That look like this.\\n\\n\\n1. And there are numbererd lists too.\\n1. Use just 1s if you want! \\n1. But the list goes on...\\n- Even if you use dashes or asterisks.\\n* And last but not least, let\\'s not forget embedded images:\\n\\n![React Logo w/ Text](https://goo.gl/Umyytc)\\n';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      value: placeholder,\r\n      editorMaximized: false,\r\n      previewerMaximized: false\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.maximizeEditor = this.maximizeEditor.bind(this);\r\n    this.maximizePreviewer = this.maximizePreviewer.bind(this);\r\n  }\r\n  handleChange(event){\r\n    this.setState({\r\n      value: event.target.value\r\n    });\r\n  }\r\n  maximizeEditor(){\r\n    if(this.state.editorMaximized){\r\n      this.setState({\r\n        editorMaximized: false\r\n      });\r\n    } else{\r\n      this.setState({\r\n        editorMaximized: true\r\n      });\r\n    }\r\n  }\r\n  maximizePreviewer(){\r\n    if(this.state.previewerMaximized){\r\n      this.setState({\r\n        previewerMaximized: false\r\n      });\r\n    } else{\r\n      this.setState({\r\n        previewerMaximized: true\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div id=\"editor-div\" className={(this.state.editorMaximized ? 'ed-max ' : '')+(this.state.previewerMaximized ? 'hide' : '')}>\r\n          <div id=\"editor-titlebar\" className=\"titlebar\">\r\n            <span><i className=\"fa fa-edit fa-pull-left\"></i>Editor</span><i className={this.state.editorMaximized ? \"fas fa-window-minimize window-control\" : \"fas fa-expand-arrows-alt window-control\"} onClick={this.maximizeEditor}></i>\r\n          </div>\r\n          <div id=\"editor-content\">\r\n            <textarea id=\"editor\" onChange={this.handleChange} value={this.state.value}/>\r\n          </div>\r\n        </div>\r\n        <div id=\"previewer\" className={(this.state.editorMaximized ? 'hide ' : '')+(this.state.previewerMaximized ? 'prev-max' : '')}>\r\n          <div id=\"previewer-titlebar\" className=\"titlebar\">\r\n          <span><i className=\"far fa-file-alt fa-pull-left\"></i>Previewer</span><i className={this.state.previewerMaximized ? \"fas fa-window-minimize window-control\" : \"fas fa-expand-arrows-alt window-control\"} onClick={this.maximizePreviewer}></i>\r\n          </div>\r\n          <div id=\"previewer-content\">\r\n            <MarkdownRenderer id=\"preview\" markdown={this.state.value} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}